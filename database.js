// Generated by LiveScript 1.2.0
(function(){
  var Db, Server, MongoClient, ObjectID, config, db, initMongoClient, loadCollections, addIndexForCollections, shutdownMongoClient, __setMockDb, getDb, queryCollection, saveSingleDocumentInDatabase, findAndModify, queryCollectionWithOptions, getCollectionCount, updateCollection, remove;
  Db = require('mongodb').Db;
  Server = require('mongodb').Server;
  MongoClient = require('mongodb').MongoClient;
  ObjectID = require('mongodb').ObjectID;
  config = require('./config');
  db = null;
  initMongoClient = function(callback){
    if (db) {
      callback();
    } else {
      db = new Db(config.mongo.db, new Server(config.mongo.host, config.mongo.port), {
        w: config.mongo.writeConcern
      });
      db.open(function(err, db){
        loadCollections(db, config.mongo.collections, function(){
          addIndexForCollections(function(){
            callback();
          });
        });
      });
    }
  };
  loadCollections = function(db, collections, callback){
    var i$, len$, c;
    db.atPlus = {};
    for (i$ = 0, len$ = collections.length; i$ < len$; ++i$) {
      c = collections[i$];
      (fn$.call(this, c, c));
    }
    callback();
    function fn$(collectionName, c){
      db.atPlus[collectionName] = db.collection(collectionName);
    }
  };
  addIndexForCollections = function(callback){
    db.createIndex('locations', 'urls', {
      unique: true
    }, callback);
  };
  shutdownMongoClient = function(callback){
    db.close();
    db = null;
    callback();
  };
  __setMockDb = function(mockDb){
    var db;
    db = mockDb;
  };
  getDb = function(callback){
    if (!db) {
      initMongoClient(function(){
        callback(db);
      });
    } else {
      callback(db);
    }
  };
  queryCollection = function(collectionName, queryObj, callback){
    getDb(function(db){
      db.atPlus[collectionName].find(queryObj).toArray(function(err, results){
        if (err) {
          console.log(err);
        }
        if (err) {
          throw err;
        }
        callback(results);
      });
    });
  };
  saveSingleDocumentInDatabase = function(collectionName, singleDoc, callback){
    getDb(function(db){
      db.atPlus[collectionName].insert(singleDoc, {
        safe: true
      }, function(err, results){
        if (err && err.code === 11000) {
          callback(err);
        } else {
          callback(results[0]);
        }
      });
    });
  };
  findAndModify = function(collectionName, criteria, update, callback){
    getDb(function(db){
      db.atPlus[collectionName].findAndModify(criteria, {}, update, {
        'new': true
      }, function(err, updatedObj){
        if (err) {
          throw err;
        }
        callback(updatedObj);
      });
    });
  };
  queryCollectionWithOptions = function(collectionName, queryObj, options, callback){
    getDb(function(db){
      db.atPlus[collectionName].find(queryObj, options).toArray(function(err, results){
        if (err) {
          throw err;
        }
        callback(results);
      });
    });
  };
  getCollectionCount = function(collectionName, queryObj, callback){
    getDb(function(db){
      db.atPlus[collectionName].find(queryObj, function(err, cursor){
        if (err) {
          throw err;
        }
        cursor.count(function(err, count){
          if (err) {
            throw err;
          }
          callback(count);
        });
      });
    });
  };
  updateCollection = function(collectionName, queryObj, updateObj, callback){
    getDb(function(db){
      db.atPlus[collectionName].update(queryObj, updateObj, {
        safe: true,
        multi: true
      }, function(err, count){
        if (err) {
          throw err;
        }
        callback(count);
      });
    });
  };
  remove = function(collectionName, queryObj, callback){
    getDb(function(db){
      db.atPlus[collectionName].remove(queryObj, {
        safe: true
      }, function(err, count){
        if (err) {
          throw err;
        }
        callback(count);
      });
    });
  };
  module.exports = {
    getDb: getDb,
    shutdownMongoClient: shutdownMongoClient,
    queryCollection: queryCollection,
    ObjectId: ObjectID,
    saveSingleDocumentInDatabase: saveSingleDocumentInDatabase,
    findAndModify: findAndModify,
    queryCollectionWithOptions: queryCollectionWithOptions,
    getCollectionCount: getCollectionCount,
    updateCollection: updateCollection,
    remove: remove
  };
}).call(this);
